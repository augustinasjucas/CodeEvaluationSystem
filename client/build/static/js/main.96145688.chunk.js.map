{"version":3,"sources":["components/CodeInputBox.js","components/SamplePage.js","components/LoginPage.js","App.js","reportWebVitals.js","index.js"],"names":["CodeInputBox","placeholder","onSubmit","useState","code","changeCode","className","rows","cols","onChange","e","target","value","onClick","defaultProps","SamplePage","testResult","setTestResult","statement","changeStatement","checkForResult","index","requestOptions","method","headers","body","JSON","stringify","submissionID","username","password","console","log","fetch","then","response","json","data","result","setTimeout","getTaskData","taskName","timeLimit","memoryLimit","split","map","item","useEffect","submissionNumer","LoginPage","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAEMA,EAAe,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAGhC,EAA2BC,mBAASF,GAApC,mBAAOG,EAAP,KAAaC,EAAb,KAOA,OACI,sBAAKC,UAAU,MAAf,UACI,0BAAUC,KAAK,KAAKC,KAAK,KAAKC,SARrB,SAACC,GACdL,EAAWK,EAAEC,OAAOC,QAOhB,SAAoDX,IACpD,uBACA,wBAAQY,QAPA,WACZX,EAASE,IAML,wBAKZJ,EAAac,aAAe,CACxBb,YAAa,4BAGFD,QC4CAe,MAlEf,WACI,MAAoCZ,mBAAS,IAA7C,mBAAOa,EAAP,KAAmBC,EAAnB,KACA,EAAqCd,mBAAS,WAA9C,mBAAOe,EAAP,KAAkBC,EAAlB,KAOMC,EAAiB,SAAjBA,EAAkBC,GACpB,IAAMC,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAACC,aAAcP,EAAOQ,SAAU,iBAAkBC,SAAU,0BAErFC,QAAQC,IAAI,cACZC,MAAM,aAAcX,GACfY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACAA,EAAKC,OACJrB,EAAcS,KAAKC,UAAUU,EAAKC,SAElCC,WAAWnB,EAAgB,IAAKC,OAiB1CmB,EAAc,SAACC,GACjB,IAAMnB,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAACc,SAAUA,EAAUZ,SAAU,iBAAkBC,SAAU,0BAEpFG,MAAM,eAAgBX,GACjBY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACCA,EAAKnB,YACTmB,EAAKnB,WAAa,oBAAsBmB,EAAKK,UAAY,0BAA4BL,EAAKM,YAAc,OACxGxB,EAA6CkB,EAAKnB,UA7C5C0B,MAAM,MAAMC,KAAI,SAACC,EAAMzB,GACjC,OAAkB,IAAVA,EAAeyB,EAAO,CAAC,sBAASzB,GAAWyB,YAmD3D,OAJAC,qBAAU,WACNhB,QAAQC,IAAI,SACZQ,EAAY,cACb,IAEC,gCACI,8BAAMtB,IACN,cAAC,EAAD,CAAcjB,YAAY,kBAAkBC,SAjC7B,SAACE,GACpB,IAAMkB,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAACvB,KAAMA,EAAMyB,SAAU,iBAAkBC,SAAU,0BAE5EG,MAAM,UAAWX,GACZY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACHE,WAAWnB,EAAgB,IAAKiB,EAAKW,uBAyBzC,8BAAMhC,QCrDHiC,EATG,WAEd,OACI,qBAAK3C,UAAU,YAAf,oD,eCuBO4C,MAvBf,WACI,MAAmC/C,oBAAS,GAA5C,mBACA,GADA,UACyCA,mBAAS,CAAC0B,SAAU,GAAIC,SAAU,MAA3E,mBAIA,OAJA,UAKI,cAAC,IAAD,UACI,qBAAKxB,UAAU,MAAf,SACI,eAAC,IAAD,WAEI,cAAC,IAAD,CAAO6C,KAAK,UAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,cAAC,EAAD,cCRTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.96145688.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst CodeInputBox = ({placeholder, onSubmit}) => {\n\n\n    const [code, changeCode] = useState(placeholder);\n    const onChange = (e) => {\n        changeCode(e.target.value);\n    }\n    const onClick = () => {                                                 // when the button is clicked, onSubmit (in\n        onSubmit(code);                                                     // App.js) is called with the current code\n    }\n    return (\n        <div className=\"App\">\n            <textarea rows='20' cols='40' onChange= {onChange}>{placeholder}</textarea>\n            <br />\n            <button onClick={onClick}>Submit</button>\n        </div>\n      );\n}\n\nCodeInputBox.defaultProps = {                                               // if no placeholder is passed, it will be\n    placeholder: 'NÄ—ra pradinio kodo!',                                     // that.\n};\n\nexport default CodeInputBox;\n","import React, { useState, useEffect } from 'react';\nimport CodeInputBox from './CodeInputBox'\n\nfunction SamplePage() {\n    const [testResult, setTestResult] = useState('');\n    const [statement, changeStatement] = useState('Loading');\n\n    const escapedNewLineToLineBreakTag = (string) => {\n        return string.split('\\n').map((item, index) => {\n            return (index === 0) ? item : [<br key={index} />, item]\n        })\n    }\n    const checkForResult = (index) => {\n        const requestOptions = {                                    // creating the request\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({submissionID: index, username: 'insertUsername', password: 'insertHashedPassword'})\n        };\n        console.log('checkinam!');\n        fetch('/getResult', requestOptions)                         // sends POST request to server with the code\n            .then(response => response.json())                      // converts response to json\n            .then((data) => {\n                if(data.result){\n                    setTestResult(JSON.stringify(data.result));\n                }else{\n                    setTimeout(checkForResult, 200, index);\n                }\n            });\n    };\n\n    const onSubmitOfCode = (code) => {\n        const requestOptions = {                                    // creating the request\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({code: code, username: 'insertUsername', password: 'insertHashedPassword'})\n        };\n        fetch('/submit', requestOptions)                            // sends POST request to server with the code\n            .then(response => response.json())                      // converts respinse to json\n            .then((data) => {\n                setTimeout(checkForResult, 200, data.submissionNumer);\n            });\n    };\n    const getTaskData = (taskName) => {\n        const requestOptions = {                                    // creating the request\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({taskName: taskName, username: 'insertUsername', password: 'insertHashedPassword'})\n        };\n        fetch('/getTaskData', requestOptions)                       // sends POST request to server with the code\n            .then(response => response.json())                      // converts respinse to json\n            .then((data) => {\n                if(!data.statement) return ;\n                data.statement += '\\nLaiko limitas: ' + data.timeLimit + 'ms\\nAtminties limitas: ' + data.memoryLimit + 'MB\\n';\n                changeStatement(escapedNewLineToLineBreakTag(data.statement));\n            });\n    };\n    useEffect(() => {\n        console.log('asaaa');\n        getTaskData('task-001');\n    }, []);\n    return (\n        <div>\n            <div>{statement}</div>\n            <CodeInputBox placeholder='input the code!' onSubmit={onSubmitOfCode}/>\n            <div>{testResult}</div>\n        </div>\n      );\n}\n\nexport default SamplePage;\n","import React, { useState } from 'react';\n\nconst LoginPage = () => {\n\n    return (\n        <div className=\"LoginPage\">\n            Login page! Submit page is in /sample\n        </div>\n      );\n}\n\nexport default LoginPage;\n","import React, { useState, useEffect } from 'react';\nimport SamplePage from './components/SamplePage.js'\nimport LoginPage from './components/LoginPage.js'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nfunction App() {\n    const [loggedIn, changeLoggedIn] = useState(false);\n    const [credentials, changeCredentials] = useState({username: '', password: ''});\n\n    \n\n    return (\n        <Router>\n            <div className=\"App\">\n                <Switch>\n\n                    <Route path=\"/sample\">\n                        <SamplePage />\n                    </Route>\n                    <Route path=\"/\">\n                        <LoginPage />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n      );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}